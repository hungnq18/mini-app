import React, { useCallback, useState } from "react";
import { getPhoneNumber, getUserInfo } from "zmp-sdk/apis";
import { Box, Button, Icon, Input, Page, Select, Text } from "zmp-ui";
import apiService from "../services/api";

function LandingPage() {
  const [formData, setFormData] = useState({
    name: "",
    phone: "",
    email: "",
    birthYear: "",
    qualification: "",
    country: ""
  });
  const [errors, setErrors] = useState({});
  const [isSubmitting, setIsSubmitting] = useState(false);

  // Optimized input change handler with useCallback
  const handleInputChange = useCallback((field, value) => {
    setFormData(prev => ({
      ...prev,
      [field]: value
    }));
    
    if (errors[field]) {
      setErrors(prev => ({
        ...prev,
        [field]: ""
      }));
    }
  }, [errors]);

  // Optimized validation
  const validateBirthYear = (year) => {
    if (!year) return "";
    const yearNum = parseInt(year);
    const currentYear = new Date().getFullYear();
    
    if (isNaN(yearNum) || yearNum < 1950 || yearNum > currentYear) {
      return "NƒÉm sinh kh√¥ng h·ª£p l·ªá";
    }
    
    return "";
  };

  // Check if we can access Zalo APIs
  const checkZaloEnvironment = useCallback(() => {
    try {
      // Check if we're in a Zalo environment
      const isZalo = typeof window !== 'undefined' && 
        (window.ZaloWebApp || 
         window.parent?.ZaloWebApp || 
         navigator.userAgent.includes('Zalo') ||
         window.location.href.includes('zalo.me'));
      
      console.log('Zalo environment check:', {
        isZalo,
        hasZaloWebApp: !!(window.ZaloWebApp || window.parent?.ZaloWebApp),
        userAgent: navigator.userAgent,
        url: window.location.href
      });
      
      return isZalo;
    } catch (error) {
      console.error('Error checking Zalo environment:', error);
      return false;
    }
  }, []);

  // Optimized ZMP SDK API call with useCallback
  const getPhoneFromZalo = useCallback(async () => {
    console.log('=== ZMP SDK API CALL ===');
    
    // Check environment first
    const isZaloEnv = checkZaloEnvironment();
    if (!isZaloEnv) {
      alert('‚ö†Ô∏è T√≠nh nƒÉng n√†y ch·ªâ ho·∫°t ƒë·ªông trong Zalo Mini App. Vui l√≤ng nh·∫≠p s·ªë ƒëi·ªán tho·∫°i th·ªß c√¥ng.');
      return;
    }
    
    try {
      // Try multiple approaches to get phone number
      console.log('Attempting to get phone number from ZMP SDK...');
      
      let phoneNumber = null;
      let userData = null;
      
      // Method 1: Try getPhoneNumber API
      try {
        console.log('Trying getPhoneNumber API...');
        const phoneData = await getPhoneNumber();
        console.log('getPhoneNumber result:', phoneData);
        
        if (phoneData) {
          // Check if we have phoneNumber directly
          if (phoneData.phoneNumber) {
            phoneNumber = phoneData.phoneNumber;
          } 
          // If we only have token, send it to backend for processing
          else if (phoneData.token) {
            console.log('Received token, processing with backend...');
            try {
              const tokenResult = await apiService.processZaloToken(phoneData.token);
              if (tokenResult.success && tokenResult.data.phone) {
                phoneNumber = tokenResult.data.phone;
                console.log('Phone number extracted from token:', phoneNumber);
              } else {
                console.log('Could not extract phone from token:', tokenResult);
                alert('‚ùå Kh√¥ng th·ªÉ l·∫•y s·ªë ƒëi·ªán tho·∫°i t·ª´ token. Vui l√≤ng nh·∫≠p th·ªß c√¥ng.');
                return;
              }
            } catch (tokenError) {
              console.error('Error processing token:', tokenError);
              alert('‚ùå L·ªói khi x·ª≠ l√Ω token. Vui l√≤ng nh·∫≠p s·ªë ƒëi·ªán tho·∫°i th·ªß c√¥ng.');
              return;
            }
          }
        }
      } catch (phoneError) {
        console.log('getPhoneNumber failed:', phoneError);
      }
      
      // Method 2: Try getUserInfo API if phone number not found
      if (!phoneNumber) {
        try {
          console.log('Trying getUserInfo API...');
          userData = await getUserInfo();
          console.log('getUserInfo result:', userData);
          
          if (userData) {
            phoneNumber = userData.phoneNumber || 
                         userData.phone || 
                         userData.number || 
                         userData.data?.phoneNumber ||
                         userData.data?.phone ||
                         userData.data?.number;
          }
        } catch (userError) {
          console.log('getUserInfo failed:', userError);
        }
      }
      
      if (phoneNumber) {
        setFormData(prev => ({
          ...prev,
          phone: phoneNumber 
        }));
        alert(`‚úÖ L·∫•y s·ªë ƒëi·ªán tho·∫°i th√†nh c√¥ng: ${phoneNumber}`);
      } else {
        console.log('No phone number found in any API response');
        console.log('User data available fields:', Object.keys(userData || {}));
        alert('‚ùå Kh√¥ng th·ªÉ l·∫•y s·ªë ƒëi·ªán tho·∫°i t·ª´ Zalo. Vui l√≤ng nh·∫≠p th·ªß c√¥ng.');
      }
    } catch (error) {
      console.error('Error getting phone number:', error);
      console.error('Error details:', {
        code: error.code,
        message: error.message,
        name: error.name,
        stack: error.stack
      });
      
      // Handle different error types with more specific messages
      if (error.code === 'PERMISSION_DENIED' || error.message?.includes('permission') || error.message?.includes('PERMISSION_DENIED')) {
        alert(`üîë C·∫¶N C·∫§P QUY·ªÄN TRUY C·∫¨P

·ª®ng d·ª•ng c·∫ßn quy·ªÅn truy c·∫≠p s·ªë ƒëi·ªán tho·∫°i ƒë·ªÉ t·ª± ƒë·ªông ƒëi·ªÅn th√¥ng tin.

üîß C√ÅCH C·∫§P QUY·ªÄN:
1. V√†o Zalo Developer Console (https://developers.zalo.me/)
2. Ch·ªçn ·ª©ng d·ª•ng c·ªßa b·∫°n
3. V√†o m·ª•c "C·∫•u h√¨nh" > "Quy·ªÅn truy c·∫≠p"
4. Th√™m quy·ªÅn "user.phone" 
5. L∆∞u c·∫•u h√¨nh v√† th·ª≠ l·∫°i

üì± Link Zalo Mini App:
https://zalo.me/s/1396606563538150743/

üí° Sau khi c·∫•p quy·ªÅn, nh·∫•n n√∫t "Zalo" ƒë·ªÉ l·∫•y s·ªë ƒëi·ªán tho·∫°i t·ª± ƒë·ªông.`);
      } else if (error.code === 'USER_DENIED' || error.message?.includes('USER_DENIED')) {
        alert('‚ùå B·∫°n ƒë√£ t·ª´ ch·ªëi c·∫•p quy·ªÅn truy c·∫≠p s·ªë ƒëi·ªán tho·∫°i. Vui l√≤ng nh·∫≠p s·ªë ƒëi·ªán tho·∫°i th·ªß c√¥ng.');
      } else if (error.code === 'SYSTEM_ERROR' || error.message?.includes('SYSTEM_ERROR')) {
        alert('‚ùå L·ªói h·ªá th·ªëng Zalo. Vui l√≤ng th·ª≠ l·∫°i sau ho·∫∑c nh·∫≠p s·ªë ƒëi·ªán tho·∫°i th·ªß c√¥ng.');
      } else if (error.message?.includes('not supported') || error.message?.includes('unavailable')) {
        alert('‚ö†Ô∏è T√≠nh nƒÉng n√†y kh√¥ng kh·∫£ d·ª•ng trong m√¥i tr∆∞·ªùng hi·ªán t·∫°i. Vui l√≤ng nh·∫≠p s·ªë ƒëi·ªán tho·∫°i th·ªß c√¥ng.');
      } else if (error.message?.includes('not in Zalo')) {
        alert('‚ö†Ô∏è T√≠nh nƒÉng n√†y ch·ªâ ho·∫°t ƒë·ªông trong Zalo Mini App. Vui l√≤ng nh·∫≠p s·ªë ƒëi·ªán tho·∫°i th·ªß c√¥ng.');
      } else {
        alert(`‚ùå L·ªói khi l·∫•y s·ªë ƒëi·ªán tho·∫°i: ${error.message || error.code || 'Kh√¥ng x√°c ƒë·ªãnh'}

Vui l√≤ng nh·∫≠p s·ªë ƒëi·ªán tho·∫°i th·ªß c√¥ng.`);
      }
    }
    
    console.log('=== END ZMP SDK API CALL ===');
  }, []);

  // Function to get Vietnamese display text
  const getDisplayText = (field, value) => {
    if (!value) return '';
    
    const mappings = {
      qualification: {
        'high_school': 'T·ªët nghi·ªáp THPT',
        'college': 'T·ªët nghi·ªáp Cao ƒë·∫≥ng',
        'university': 'T·ªët nghi·ªáp ƒê·∫°i h·ªçc',
        'postgraduate': 'Sau ƒê·∫°i h·ªçc'
      },
      country: {
        'vietnam': 'Vi·ªát Nam',
        'germany': 'ƒê·ª©c',
        'japan': 'Nh·∫≠t B·∫£n'
      }
    };
    
    return mappings[field]?.[value] || value;
  };

  // Optimized scroll to form function with useCallback
  const scrollToForm = useCallback(() => {
    const formElement = document.getElementById('registration-form');
    if (formElement) {
      formElement.scrollIntoView({ behavior: 'smooth' });
    }
  }, []);

  // Form submission
  const handleSubmit = async (e) => {
    e.preventDefault();
    
    // Client-side validation
    const newErrors = {};
    
    if (!formData.name.trim()) {
      newErrors.name = "Vui l√≤ng nh·∫≠p h·ªç t√™n";
    }
    
    if (!formData.phone.trim()) {
      newErrors.phone = "Vui l√≤ng nh·∫≠p s·ªë ƒëi·ªán tho·∫°i";
    }
    
    if (!formData.email.trim()) {
      newErrors.email = "Vui l√≤ng nh·∫≠p email";
    }
    
    const birthYearError = validateBirthYear(formData.birthYear);
    if (birthYearError) {
      newErrors.birthYear = birthYearError;
    }
    
    if (!formData.qualification) {
      newErrors.qualification = "Vui l√≤ng ch·ªçn tr√¨nh ƒë·ªô h·ªçc v·∫•n";
    }
    
    if (!formData.country) {
      newErrors.country = "Vui l√≤ng ch·ªçn qu·ªëc gia";
    }
    
    setErrors(newErrors);
    
    if (Object.keys(newErrors).length > 0) {
      return;
    }
    
    setIsSubmitting(true);
    
    try {
      // Add Zalo environment info to form data
      const submitData = {
        ...formData,
        source: 'zalo',
        zaloInfo: {
          isZaloEnvironment: typeof window !== 'undefined' && !!window.ZaloWebApp,
          userAgent: navigator.userAgent,
          timestamp: new Date().toISOString()
        }
      };
      
      const response = await apiService.createLead(submitData);
      
      if (response.success) {
        alert("‚úÖ ƒêƒÉng k√Ω th√†nh c√¥ng! Ch√∫ng t√¥i s·∫Ω li√™n h·ªá v·ªõi b·∫°n s·ªõm nh·∫•t.");
        setFormData({
          name: "",
          phone: "",
          email: "",
          birthYear: "",
          qualification: "",
          country: "",
          message: ""
        });
        setErrors({});
      } else {
        alert(`‚ùå L·ªói: ${response.message}`);
      }
    } catch (error) {
      console.error('Error submitting form:', error);
      alert("‚ùå C√≥ l·ªói x·∫£y ra. Vui l√≤ng th·ª≠ l·∫°i.");
    } finally {
      setIsSubmitting(false);
    }
  };

  // Log environment info for debugging
  console.log('Environment check:', {
    hasWindow: typeof window !== 'undefined',
    hasZaloWebApp: typeof window !== 'undefined' && !!window.ZaloWebApp,
    hasZMP: typeof getPhoneNumber === 'function',
    userAgent: typeof window !== 'undefined' ? navigator.userAgent : 'N/A'
  });

  return (
    <Page className="landing-page">
      {/* Hero Section */}
      <Box className="hero-section">
        <Box className="hero-content">
          <Text className="hero-title">
            T·∫≠p ƒëo√†n H·∫£i Phong
          </Text>
          <Text className="hero-subtitle">
            C∆° h·ªôi vi·ªác l√†m t·∫°i ƒê·ª©c, Nh·∫≠t B·∫£n, Vi·ªát Nam
          </Text>
          <Text className="hero-description">
            Kh√°m ph√° nh·ªØng c∆° h·ªôi ngh·ªÅ nghi·ªáp tuy·ªát v·ªùi v·ªõi m·ª©c l∆∞∆°ng h·∫•p d·∫´n v√† m√¥i tr∆∞·ªùng l√†m vi·ªác chuy√™n nghi·ªáp
          </Text>
          <Button
            className="hero-cta-button"
            onClick={scrollToForm}
          >
            ƒêƒÉng k√Ω ngay
          </Button>
        </Box>
      </Box>

      {/* Statistics Section */}
      <Box className="stats-section">
        <Box className="stats-container">
          <Box className="stat-item">
            <Text className="stat-number">500+</Text>
            <Text className="stat-label">·ª®ng vi√™n th√†nh c√¥ng</Text>
          </Box>
          <Box className="stat-item">
            <Text className="stat-number">50+</Text>
            <Text className="stat-label">ƒê·ªëi t√°c uy t√≠n</Text>
            </Box>
          <Box className="stat-item">
            <Text className="stat-number">3</Text>
            <Text className="stat-label">Qu·ªëc gia</Text>
            </Box>
          <Box className="stat-item">
            <Text className="stat-number">95%</Text>
            <Text className="stat-label">T·ª∑ l·ªá th√†nh c√¥ng</Text>
            </Box>
            </Box>
      </Box>

      {/* About Us Section */}
      <Box className="about-section">
        <Box className="about-container">
          <Text className="section-title">V·ªÅ ch√∫ng t√¥i</Text>
          <Text className="about-description">
            T·∫≠p ƒëo√†n H·∫£i Phong l√† ƒë∆°n v·ªã chuy√™n nghi·ªáp trong lƒ©nh v·ª±c ph√°i c·ª≠ lao ƒë·ªông. 
            V·ªõi h∆°n 10 nƒÉm kinh nghi·ªám, ch√∫ng t√¥i ƒë√£ gi√∫p h√†ng ngh√¨n ·ª©ng vi√™n th·ª±c hi·ªán ∆∞·ªõc m∆° l√†m vi·ªác t·∫°i n∆∞·ªõc ngo√†i.
              </Text>
                <Button
            className="about-cta-button"
                  onClick={scrollToForm}
                >
            T√¨m hi·ªÉu th√™m
                </Button>
            </Box>
      </Box>

      {/* Services Section */}
      <Box className="services-section">
        <Box className="services-container">
          <Text className="section-title">D·ªãch v·ª• c·ªßa ch√∫ng t√¥i</Text>
          <Box className="services-grid">
            <Box className="service-item">
              <Icon icon="zi-user" className="service-icon" />
              <Text className="service-title">Ph√°i c·ª≠ vi·ªác l√†m</Text>
              <Text className="service-description">
                H·ªó tr·ª£ t√¨m vi·ªác l√†m t·∫°i ƒê·ª©c, Nh·∫≠t B·∫£n v·ªõi m·ª©c l∆∞∆°ng h·∫•p d·∫´n
              </Text>
            </Box>
            <Box className="service-item">
              <Icon icon="zi-graduation" className="service-icon" />
              <Text className="service-title">H·ªó tr·ª£ 24/7</Text>
              <Text className="service-description">
                S·∫µn s√†ng h·ªó tr·ª£ c√°c ·ª©ng vi√™n 
              </Text>
            </Box>
            <Box className="service-item">
              <Icon icon="zi-certificate" className="service-icon" />
              <Text className="service-title">ƒê√†o t·∫°o k·ªπ nƒÉng</Text>
              <Text className="service-description">
                Cung c·∫•p c√°c kh√≥a h·ªçc ngo·∫°i ng·ªØ v√† k·ªπ nƒÉng ngh·ªÅ nghi·ªáp
              </Text>
            </Box>
          </Box>
        </Box>
      </Box>

      {/* Registration Form */}
      <Box id="registration-form" className="form-section">
        <Box className="form-container">
          <Text className="section-title">ƒêƒÉng k√Ω th√¥ng tin</Text>
          <Text className="form-description">
            ƒêi·ªÅn th√¥ng tin ƒë·ªÉ nh·∫≠n t∆∞ v·∫•n mi·ªÖn ph√≠ v·ªÅ c∆° h·ªôi vi·ªác l√†m
          </Text>
          
          <form onSubmit={handleSubmit} className="registration-form">
            <Box className="form-row">
              <Box className="form-group">
                <Text className="form-label">H·ªç v√† t√™n *</Text>
                <Input
                  placeholder="Nh·∫≠p h·ªç v√† t√™n"
                  value={formData.name}
                  onChange={(e) => handleInputChange('name', e.target.value)}
                  className={errors.name ? 'error' : ''}
                />
                {errors.name && <Text className="error-text">{errors.name}</Text>}
              </Box>
              
              <Box className="form-group">
                <Text className="form-label">S·ªë ƒëi·ªán tho·∫°i *</Text>
                <Box className="phone-input-group">
                  <Input
                    placeholder="Nh·∫≠p s·ªë ƒëi·ªán tho·∫°i"
                    value={formData.phone}
                    onChange={(e) => handleInputChange('phone', e.target.value)}
                    className={errors.phone ? 'error' : ''}
                  />
                  <Button
                    type="button"
                    className="zalo-button"
                    onClick={getPhoneFromZalo}
                  >
                    Zalo
                  </Button>
                </Box>
                {errors.phone && <Text className="error-text">{errors.phone}</Text>}
              </Box>
            </Box>

            <Box className="form-row">
              <Box className="form-group">
                <Text className="form-label">Email *</Text>
                <Input
                  type="email"
                  placeholder="Nh·∫≠p email"
                  value={formData.email}
                  onChange={(e) => handleInputChange('email', e.target.value)}
                  className={errors.email ? 'error' : ''}
                />
                {errors.email && <Text className="error-text">{errors.email}</Text>}
              </Box>

              <Box className="form-group">
                <Text className="form-label">NƒÉm sinh</Text>
                <Input
                  type="number"
                  placeholder="Nh·∫≠p nƒÉm sinh"
                  value={formData.birthYear}
                  onChange={(e) => handleInputChange('birthYear', e.target.value)}
                  className={errors.birthYear ? 'error' : ''}
                />
                {errors.birthYear && <Text className="error-text">{errors.birthYear}</Text>}
              </Box>
            </Box>

            <Box className="form-row">
              <Box className="form-group">
                <Text className="form-label">Tr√¨nh ƒë·ªô h·ªçc v·∫•n *</Text>
                <Select
                  placeholder="Ch·ªçn tr√¨nh ƒë·ªô h·ªçc v·∫•n"
                  value={formData.qualification}
                  onChange={(value) => handleInputChange('qualification', value)}
                  className={errors.qualification ? 'error' : ''}
                >
                  <Select.Option value="high_school">T·ªët nghi·ªáp THPT</Select.Option>
                  <Select.Option value="college">T·ªët nghi·ªáp Cao ƒë·∫≥ng</Select.Option>
                  <Select.Option value="university">T·ªët nghi·ªáp ƒê·∫°i h·ªçc</Select.Option>
                  <Select.Option value="postgraduate">Sau ƒê·∫°i h·ªçc</Select.Option>
                </Select>
                {formData.qualification && (
                  <Text className="selected-value">
                    ƒê√£ ch·ªçn: {getDisplayText('qualification', formData.qualification)}
                  </Text>
                )}
                {errors.qualification && <Text className="error-text">{errors.qualification}</Text>}
              </Box>

              <Box className="form-group">
                <Text className="form-label">Qu·ªëc gia quan t√¢m *</Text>
              <Select
                placeholder="Ch·ªçn qu·ªëc gia"
                value={formData.country}
                  onChange={(value) => handleInputChange('country', value)}
                  className={errors.country ? 'error' : ''}
                >
                  <Select.Option value="vietnam">Vi·ªát Nam</Select.Option>
                <Select.Option value="germany">ƒê·ª©c</Select.Option>
                <Select.Option value="japan">Nh·∫≠t B·∫£n</Select.Option>
              </Select>
              {formData.country && (
                  <Text className="selected-value">
                  ƒê√£ ch·ªçn: {getDisplayText('country', formData.country)}
                </Text>
              )}
                {errors.country && <Text className="error-text">{errors.country}</Text>}
            </Box>
            </Box>

            <Button
              type="submit"
              className="submit-button"
              disabled={isSubmitting}
            >
              {isSubmitting ? "ƒêang g·ª≠i..." : "ƒêƒÉng k√Ω ngay"}
            </Button>
            </form>
        </Box>
      </Box>

      {/* Benefits Section */}
      <Box className="benefits-section">
        <Box className="benefits-container">
          <Text className="section-title">L·ª£i √≠ch khi tham gia</Text>
          <Box className="benefits-grid">
            <Box className="benefit-item">
              <Icon icon="zi-money" className="benefit-icon" />
              <Text className="benefit-title">M·ª©c l∆∞∆°ng h·∫•p d·∫´n</Text>
              <Text className="benefit-description">
                Thu nh·∫≠p t·ª´ 15-30 tri·ªáu/th√°ng t√πy theo v·ªã tr√≠ v√† kinh nghi·ªám
              </Text>
            </Box>
            <Box className="benefit-item">
              <Icon icon="zi-shield" className="benefit-icon" />
              <Text className="benefit-title">B·∫£o hi·ªÉm ƒë·∫ßy ƒë·ªß</Text>
              <Text className="benefit-description">
                ƒê∆∞·ª£c h∆∞·ªüng ƒë·∫ßy ƒë·ªß c√°c ch·∫ø ƒë·ªô b·∫£o hi·ªÉm x√£ h·ªôi v√† y t·∫ø
              </Text>
            </Box>
            <Box className="benefit-item">
              <Icon icon="zi-home" className="benefit-icon" />
              <Text className="benefit-title">Ch·ªó ·ªü mi·ªÖn ph√≠</Text>
              <Text className="benefit-description">
                H·ªó tr·ª£ t√¨m ki·∫øm v√† chi ph√≠ nh√† ·ªü trong th·ªùi gian ƒë·∫ßu
              </Text>
            </Box>
            <Box className="benefit-item">
              <Icon icon="zi-plane" className="benefit-icon" />
              <Text className="benefit-title">V√© m√°y bay</Text>
              <Text className="benefit-description">
                T√†i tr·ª£ v√© m√°y bay v√† c√°c chi ph√≠ di chuy·ªÉn ban ƒë·∫ßu
              </Text>
            </Box>
          </Box>
        </Box>
      </Box>

      {/* Contact Section */}
      <Box className="contact-section">
        <Box className="contact-container">
          <Text className="section-title">Li√™n h·ªá v·ªõi ch√∫ng t√¥i</Text>
          <Box className="contact-info">
            <Box className="contact-item">
              <Icon icon="zi-phone" className="contact-icon" />
              <Text className="contact-text">Hotline: 1900 1234</Text>
            </Box>
            <Box className="contact-item">
              <Icon icon="zi-mail" className="contact-icon" />
              <Text className="contact-text">Email: info@haiphong.com</Text>
            </Box>
            <Box className="contact-item">
              <Icon icon="zi-location" className="contact-icon" />
              <Text className="contact-text">ƒê·ªãa ch·ªâ: H·∫£i Ph√≤ng, Vi·ªát Nam</Text>
            </Box>
          </Box>
        </Box>
      </Box>
    </Page>
  );
}

// Export with React.memo for performance optimization
export default React.memo(LandingPage);